name: CI/CD

on:
  push:
    branches: [ main ]
    paths-ignore:
    - '.gitignore'
    - '.dockerignore'

jobs:
  ci:   #job 이름
    runs-on: ubuntu-latest  #job을 실행할 환경(=git action이 동작하는 환경)
    steps:
    - uses: actions/checkout@v4 # uses=액션들. 이미 만들어진 액션을 검색해서 가져다 쓰면된다. 해당 레포에 접근 권한이 있다면 레포를 가져올것.
      with:
        fetch-depth: 1          #가장 최근 commit한 히스토리만 가져온다.

    - name: Print Current Directory
      run: pwd
      
    - name: Configure AWS credentials #AWS 액세스키와 시크릿 액세스키를 미리 setting에서 secret에 등록해놓아야함.
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set Variables
      id: set-var
      run: |
        echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV
        echo "ECR_REPOSITORY_FRONT=ccb-frontend" >> $GITHUB_ENV  #ECR 레포지토리
        echo "ECR_REPOSITORY_BACK=ccb-backend" >> $GITHUB_ENV
        echo "IMAGE_TAG=${{ github.run_number }}" >> $GITHUB_ENV
        echo "GIT_EMAIL=dlagksmf02@naver.com" >> $GITHUB_ENV
        echo "GIT_NAME=sphaneul" >> $GITHUB_ENV
   
    - uses: actions/setup-java@v2
      with:
        distribution: adopt
        java-version: 8
     
  #  - name: Setup Gradle
  #    uses: gradle/gradle-build-action@v3

  #  - name: chmod
  #    run: chmod +x ./gradlew
  #    gradle로 빌드시 사용

  #  - name: Execute maven build
  #    run: mvn clean package
  
    - name: Docker Image Build for Frontend
      id: build-frontend-image
      #if: startsWith(github.event_path, 'frontend/')
      run: |
        docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_FRONT }}:${{ env.IMAGE_TAG }} ./frontend

    - name: Docker Image Push for Frontend
      #if: steps.build-frontend-image.outputs.result == 'success'
      run: |
        docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_FRONT }}:${{ env.IMAGE_TAG }}

    - name: Docker Image Build for Backend
      id: build-backend-image
      if: startsWith(github.event_path, 'backend/')
      run: |
        docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_BACK }}:${{ env.IMAGE_TAG }} ./backend

    - name: Docker Image Push for Backend
      if: steps.build-backend-image.outputs.result == 'success'
      run: |
        docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_BACK }}:${{ env.IMAGE_TAG }}
        
    - name: Checkout Deployment Repository
      uses: actions/checkout@v4
      with:
        repository: chitchatbot/bedrock #본인에 맞게 수정
        ref: main  # branch
        token: ${{ secrets.GH_TOKEN }}

    - name: Update k8s manifest for Frontend
      #if: steps.build-frontend-image.outputs.result == 'success'
      run: |
        sed -i "s@ \
        image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_FRONT }}:.*@ \
        image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_FRONT }}:${{ env.IMAGE_TAG }}@g" ./manifest/front.yaml

    - name: Commit and Push Frontend Changes
      #if: steps.build-frontend-image.outputs.result == 'success'
      run: |
        git config user.email ${{ env.GIT_EMAIL }}
        git config user.name ${{ env.GIT_NAME }}
        git add ./manifest/front.yaml
        git commit -m "Update image tag for frontend"
        git push origin main

    - name: Update k8s manifest for Backend
      if: steps.build-backend-image.outputs.result == 'success'
      run: |
        sed -i "s@ \
        image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_BACK }}:.*@ \
        image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_BACK }}:${{ env.IMAGE_TAG }}@g" ./manifest/back.yaml

    - name: Commit and Push Backend Changes
      if: steps.build-backend-image.outputs.result == 'success'
      run: |
        git config user.email ${{ env.GIT_EMAIL }}
        git config user.name ${{ env.GIT_NAME }}
        git add ./manifest/back.yaml
        git commit -m "Update image tag for backend"
        git push origin main

    - name: Copy manifest.yaml from GitHub to EC2 instance
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.EC2_IP_ADDRESS }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        script: |
          wget -O front.yaml https://raw.githubusercontent.com/chitchatbot/bedrock/main/manifest/front.yaml
    - name: Deploy on EC2 instance
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.EC2_IP_ADDRESS }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        script: |
          kubectl delete -f front.yaml --ignore-not-found
          kubectl apply -f front.yaml
